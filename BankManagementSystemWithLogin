import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.HashMap;
import java.util.Map;

class BankManagementSystemWithLogin {
    private static final String USER_CREDENTIALS_FILENAME = "user_credentials.txt";
    private static final String CUSTOMER_DATA_FILENAME = "customer_data.txt";
    private static Map<String, String> userCredentials = new HashMap<>();
    private static Map<String, Customer> customers = new HashMap<>();

    public static void main(String[] args) {
        loadUserCredentialsFromFile();
        loadCustomerDataFromFile();
        createAndShowGUI();
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Bank Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        JPanel panel = new JPanel(new GridLayout(3, 1));

        JButton loginButton = new JButton("Login");
        JButton createAccountButton = new JButton("Create Account");
        JButton performTransactionButton = new JButton("Perform Transaction");

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                login();
            }
        });

        performTransactionButton.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        String username = JOptionPane.showInputDialog("Enter username:");
        if (username != null && !username.isEmpty()) {
            performTransaction(username);
        } else {
            JOptionPane.showMessageDialog(null, "Invalid username!");
        }
    }
});


       

        panel.add(loginButton);
        panel.add(createAccountButton);
        panel.add(performTransactionButton);

        frame.add(panel);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private static void login() {
    String username = JOptionPane.showInputDialog("Enter username:");
    String password = JOptionPane.showInputDialog("Enter password:");
    if (username != null && password != null && userCredentials.containsKey(username) &&
            userCredentials.get(username).equals(password)) {
        JOptionPane.showMessageDialog(null, "Login successful!");
        performTransaction(username);
        
        } else {
        JOptionPane.showMessageDialog(null, "Invalid username or password!");
    }
}


    private static void createAccount() {
        String username = JOptionPane.showInputDialog("Enter new username:");
        String password = JOptionPane.showInputDialog("Enter password:");
        if (username != null && password != null && !userCredentials.containsKey(username)) {
            userCredentials.put(username, password);
            saveUserCredentialsToFile();
            JOptionPane.showMessageDialog(null, "Account created successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "Username already exists or invalid input!");
        }
    }

    private static void performTransaction(String username) {
        String[] options = {"Deposit", "Withdraw"};
        int choice = JOptionPane.showOptionDialog(null, "Choose transaction type:", "Transaction Type",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        if (choice == 0) { // Deposit
            double depositAmount = Double.parseDouble(JOptionPane.showInputDialog("Enter deposit amount:"));
            if (depositAmount > 0) {
                Customer customer = customers.get(username);
                customer.addTransaction(depositAmount);
                saveCustomerDataToFile();
                JOptionPane.showMessageDialog(null, "Deposit successful. Current balance: " + customer.getBalance());
            } else {
                JOptionPane.showMessageDialog(null, "Invalid deposit amount!");
            }
        } else if (choice == 1) { // Withdraw
            double withdrawAmount = Double.parseDouble(JOptionPane.showInputDialog("Enter withdrawal amount:"));
            if (withdrawAmount > 0) {
                Customer customer = customers.get(username);
                if (customer.getBalance() >= withdrawAmount) {
                    customer.addTransaction(-withdrawAmount);
                    saveCustomerDataToFile();
                    JOptionPane.showMessageDialog(null, "Withdrawal successful. Current balance: " + customer.getBalance());
                } else {
                    JOptionPane.showMessageDialog(null, "Insufficient balance!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Invalid withdrawal amount!");
            }
        }
    }

    private static void loadUserCredentialsFromFile() {
        File file = new File(USER_CREDENTIALS_FILENAME);
        if (file.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(USER_CREDENTIALS_FILENAME))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] data = line.split(",");
                    if (data.length == 2) {
                        userCredentials.put(data[0], data[1]);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private static void saveUserCredentialsToFile() {
        try (PrintWriter writer = new PrintWriter(new FileWriter(USER_CREDENTIALS_FILENAME))) {
            for (Map.Entry<String, String> entry : userCredentials.entrySet()) {
                writer.println(entry.getKey() + "," + entry.getValue());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void loadCustomerDataFromFile() {
        File file = new File(CUSTOMER_DATA_FILENAME);
        if (file.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(CUSTOMER_DATA_FILENAME))) {
                customers = (Map<String, Customer>) ois.readObject();
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        }
    }

    private static void saveCustomerDataToFile() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(CUSTOMER_DATA_FILENAME))) {
            oos.writeObject(customers);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class Customer implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private double balance;

    public Customer(String name, double balance) {
        this.name = name;
        this.balance = balance;
    }

    public String getName() {
        return name;
    }

    public double getBalance() {
        return balance;
    }

    public void addTransaction(double amount) {
        this.balance += amount;
    }
}
